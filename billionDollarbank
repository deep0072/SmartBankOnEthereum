pragma solidity >=0.7.0 <0.9.0;


interface cETH {
    
    // define functions of COMPOUND we'll be using
    
    function mint() external payable; // to deposit to compound
    function redeem(uint redeemTokens) external returns (uint); // to withdraw from compound
    
    //following 2 functions to determine how much you'll be able to withdraw
    function exchangeRateStored() external view returns (uint); 
    function balanceOf(address owner) external view returns (uint256 balance);
}


contract SmartBankAccount {


    uint totalContractBalance = 0;
    
    address COMPOUND_CETH_ADDRESS = 0x859e9d8a4edadfEDb5A2fF311243af80F85A91b8;
    cETH ceth = cETH(COMPOUND_CETH_ADDRESS);

    function getContractBalance() public view returns(uint){
        return totalContractBalance;
    }
    
    mapping(address => uint) balances;
    mapping(address => uint) depositTimestamps;
    
    function addBalance () public payable {
        _mint(msg.value);
    }


    // function to mint the amount of extra eth on compound smart contract
    function _mint(uint amountofEth) internal {

        uint256 amountOfethbeforeMinting = ceth.balanceOf(address(this));
        
        // mint started sending eth to smart compound in exhange will get the ceth
        ceth.mint{value:amountofEth}();

        uint256 amountOfethAfterMinting = ceth.balanceOf(address(this));

        uint CethOfuser = amountOfethAfterMinting - amountOfethbeforeMinting;

        totalContractBalance == CethOfuser;
        balances[msg.sender] = CethOfuser; // it is the no of ceth owned by user


    }
    


    // getting total balance with interest

    function getBalance(address _add) public view returns(uint256) {
        return balances[_add] * ceth.exchangeRateStored() / 1e18; // getting eth balance 

    }
    

    // getting extra ceth or kind of interest on deposited amount
    function cethBalance(address _add) public view returns(uint){
        return balances[_add];
    }


    // withdraw amount

    function withdrawMax() public payable {

        address payable transferTo= payable(msg.sender); // get the recipent add make it payable

        ceth.redeem(balances[msg.sender]); // here we are redeeming the whole amount of ether in exchange of ceth;

        uint amountTotransfer = getBalance(msg.sender); // get the whole balance to withdraw
        totalContractBalance -= balances[msg.sender];

        balances[msg.sender] = 0;
        transferTo.transfer(amountTotransfer); // tranfer the ether whoever is calling this function





 
       

    }
    
}
